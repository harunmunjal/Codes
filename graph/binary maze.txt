import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
class point {
    int x;
    int y;
    public point(int xi, int yi) {
        x = xi;
        y = yi;
    }
}
class node {
    point pt;
    int d;
    public node(point p, int di) {
        pt = p;
        d = di;
    }
}
public class Solution {
    public static boolean isSafe(int r, int c) {
        return  r >= 0 && r < 9 && c >= 0 && c < 9; 
    }
    public static int bfs(int mat[][], point s, point d) {
        int[] r = {-1, 0, 0, 1};
        int[] c = {0, -1, 1, 0};
        boolean[][] vi = new boolean[9][9];
        vi[s.x][s.y] = true;
        Queue<node> q = new LinkedList<node>();
        node si = new node(s, 0);
        q.add(si);
        while(!q.isEmpty()) {
            node curr = q.peek();
            point pt = curr.pt;
            if(pt.x == d.x && pt.y == d.y) 
                return curr.d;
            q.poll();
            for(int i = 0; i < 4; i++) {
                int row = r[i] + pt.x;
                int col = c[i] + pt.y;
                if(isSafe(row, col) && mat[row][col] == 1 && !vi[row][col]) {
                    vi[row][col] = true;
                    point p = new point(row, col);
                    node ad = new node(p, curr.d + 1);
                    q.add(ad);
                }
            }
                
        }
       return -1; 
    }
    public static void main(String[] args) {
          int mat [][] = {
        { 1, 0, 1, 1, 1, 1, 0, 1, 1, 1 },
        { 1, 0, 1, 0, 1, 1, 1, 0, 1, 1 },
        { 1, 1, 1, 0, 1, 1, 0, 1, 0, 1 },
        { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
        { 1, 1, 1, 0, 1, 1, 1, 0, 1, 0 },
        { 1, 0, 1, 1, 1, 1, 0, 1, 0, 0 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
        { 1, 0, 1, 1, 1, 1, 0, 1, 1, 1 },
        { 1, 1, 0, 0, 0, 0, 1, 0, 0, 1 },
    };
        point sr = new point(0,0);
        point de = new point(3,4);
        System.out.println(bfs(mat, sr, de));
        
      
    }
}
