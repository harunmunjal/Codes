/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode a) {
	    
	    ArrayList<ArrayList<Integer>> r = new ArrayList<ArrayList<Integer>>();
	    
	       Stack<TreeNode> s1 = new Stack<TreeNode>();
        Stack<TreeNode> s2 = new Stack<TreeNode>();
        if(a == null)
        return r;
        s1.push(a);
        while(!s1.isEmpty() || !s2.isEmpty()){
            int f = 0;
            ArrayList<Integer> b = new ArrayList<Integer>();
            while(!s1.isEmpty()){
                f = 1;
               TreeNode x = s1.peek();
               s1.pop();
               if(x.left != null)
                    s2.push(x.left);
                   if(x.right != null)
                    s2.push(x.right);
                 
            
                    b.add(x.val);
                    
            }
            if(f == 1)
            r.add(b);
             f = 0;
            ArrayList<Integer> c = new ArrayList<Integer>();
               while(!s2.isEmpty()){
                   f = 1;
                TreeNode x = s2.peek();
                s2.pop();
               
                      if(x.right != null)
                    s1.push(x.right);
                  if(x.left != null)
                    s1.push(x.left);
                    
                     c.add(x.val);
             
            }
            if(f == 1)
            r.add(c);
        }
	    return r;
	}
}